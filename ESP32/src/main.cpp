#include <WiFi.h>
#include <Firebase_ESP_Client.h>
#include <SPI.h>
#include <MFRC522.h>
#include <Adafruit_Sensor.h>
#include <DHT.h>
#include <DHT_U.h>
#include <ESP32Servo.h>

bool isBusy = false; // Bi·∫øn to√†n c·ª•c ƒë·ªÉ ki·ªÉm so√°t tr·∫°ng th√°i b·∫≠n r·ªôn

// ==== Servo Config ====
Servo myservo;
int servoPin = 27;
int openPos = 90;
int closePos = 0;

void setupServo() {
  myservo.setPeriodHertz(50);
  myservo.attach(servoPin, 500, 2400);
  myservo.write(closePos);
}

void openDoor() {
  isBusy = true; // ƒê·∫∑t tr·∫°ng th√°i b·∫≠n r·ªôn
  Serial.println("üîì M·ªü c·ª≠a: Quay servo ƒë·∫øn 90 ƒë·ªô");
  myservo.write(openPos);
  delay(3000);
  Serial.println("üîí ƒê√≥ng c·ª≠a: Quay servo v·ªÅ 0 ƒë·ªô");
  myservo.write(closePos);
  isBusy = false; // ƒê·∫∑t l·∫°i tr·∫°ng th√°i b·∫≠n r·ªôn
}

// ==== DHT Config ====
#define DHTPIN 5
#define DHTTYPE DHT11
DHT_Unified dht(DHTPIN, DHTTYPE);

// ==== LED Config ====
#define RED_PIN    32
#define GREEN_PIN  25
#define BLUE_PIN   26

// ==== RFID Config ====
#define SS_PIN 21
#define RST_PIN 22
MFRC522 rfid(SS_PIN, RST_PIN);

// ==== Buzzer Config ====
#define BUZZER 13
// ==== ChuyenDong Config ====
#define CHUYENDONG 34

// ==== WiFi Config ====
// #define WIFI_SSID "A25859"
// #define WIFI_PASSWORD "12345678"
#define WIFI_SSID "binmilo"
#define WIFI_PASSWORD "20202020"
// ==== Firebase Config ====
#define API_KEY "AIzaSyBc3SKMJKBHq2Q3_NONXaZRroQhpHbtBD8"
#define DATABASE_URL "https://do-an-3-9959f-default-rtdb.asia-southeast1.firebasedatabase.app/"
#define USER_EMAIL "admin@gmail.com"
#define USER_PASSWORD "admin123"

// ==== Firebase Instances ====
FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;

// ==== millis() Control ====
unsigned long previousMillisRFID = 0;
unsigned long previousMillisDHT = 0;
unsigned long previousMillisReadToOpenDoor = 0;
unsigned long previousMillisReadNewCard = 0;
unsigned long previousMillisReadRequestNewCard = 0;
unsigned long previousMillisNightMode = 0;
const unsigned long intervalReadRequestNewCard = 1000; 
const unsigned long intervalReadNewCard = 5000; 
const unsigned long intervalReadToOpenDoor = 1000; // Th·ªùi gian servo ho·∫°t ƒë·ªông
const unsigned long intervalRFID = 500;
const unsigned long intervalDHT = 60000;
const unsigned long intervalNightMode = 2000; // Th·ªùi gian ki·ªÉm tra ch·∫ø ƒë·ªô ban ƒë√™m

// ==== Function Prototypes ====
void setColor(int r, int g, int b);
void RC522();
void DHT_11();
void ReadFireBaseToOpenDoor();
void AddCard();
void checkNightMode();

void setup() {
  Serial.begin(115200);
  while (!Serial) {} // Ch·ªù Serial k·∫øt n·ªëi
  
  pinMode(BUZZER, OUTPUT);
  digitalWrite(BUZZER, LOW); // T·∫Øt Buzzer ban ƒë·∫ßu
  pinMode(CHUYENDONG, INPUT);

  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("üîå ƒêang k·∫øt n·ªëi WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
  }
  Serial.println("\n‚úÖ WiFi ƒë√£ k·∫øt n·ªëi!");

  config.api_key = API_KEY;
  config.database_url = DATABASE_URL;
  auth.user.email = USER_EMAIL;
  auth.user.password = USER_PASSWORD;
  Firebase.begin(&config, &auth);
  Firebase.reconnectWiFi(true);
  Serial.println("K·∫øt n·ªëi Firebase th√†nh c√¥ng");

  SPI.begin();
  rfid.PCD_Init();
  Serial.println("üëâ Qu√©t th·∫ª RFID...");

  dht.begin();
  sensor_t sensor;
  dht.temperature().getSensor(&sensor);
  dht.humidity().getSensor(&sensor);

  setupServo();

  // C·∫•u h√¨nh LED RGB
  pinMode(RED_PIN, OUTPUT);
  pinMode(GREEN_PIN, OUTPUT);
  pinMode(BLUE_PIN, OUTPUT);
  setColor(0, 0, 0); // T·∫Øt ƒë√®n ban ƒë·∫ßu
}

void loop() {
  unsigned long currentMillis = millis();

  if (!isBusy &&currentMillis - previousMillisRFID >= intervalRFID) {
    previousMillisRFID = currentMillis;
    RC522();
  }

  if (!isBusy &&currentMillis - previousMillisDHT >= intervalDHT) {
    previousMillisDHT = currentMillis;
    DHT_11();
  }

  if (!isBusy &&currentMillis - previousMillisReadToOpenDoor >= intervalReadToOpenDoor) {
    previousMillisReadToOpenDoor = currentMillis;
    ReadFireBaseToOpenDoor();
  }
  
  if ( !isBusy && currentMillis - previousMillisReadRequestNewCard >= intervalReadRequestNewCard) {
    previousMillisReadRequestNewCard = currentMillis;
    AddCard();
  }

  if ( !isBusy && currentMillis - previousMillisNightMode >= intervalNightMode){
    previousMillisNightMode = currentMillis;
    checkNightMode();
  }
}

void checkNightMode() {
  String path_NightMode = "/night_mode/";

  if (Firebase.RTDB.getBool(&fbdo, path_NightMode)) {
    if (fbdo.boolData()) {
      // Ki·ªÉm tra n√∫t Chuy·ªÉn ƒë·ªông
      if (digitalRead(CHUYENDONG) == LOW) {
        digitalWrite(BUZZER, HIGH); // B·∫≠t Buzzer
      }
      else if (digitalRead(CHUYENDONG) == HIGH){
        digitalWrite(BUZZER, LOW); // T·∫Øt Buzzer
      }
    }
    else{
        digitalWrite(BUZZER, LOW); // T·∫Øt Buzzer
    }
  }
}

// ==== ƒêi·ªÅu khi·ªÉn LED b·∫±ng digitalWrite (RGB c∆° b·∫£n) ====
void setColor(int r, int g, int b) {
  digitalWrite(RED_PIN, r ? HIGH : LOW);
  digitalWrite(GREEN_PIN, g ? HIGH : LOW);
  digitalWrite(BLUE_PIN, b ? HIGH : LOW);
}

// ==== ƒê·ªçc FireBase ƒë·ªÉ m·ªü c·ª≠a ====
void ReadFireBaseToOpenDoor()
{
  if(Firebase.RTDB.getBool(&fbdo, "/door_control/status")) {
    if (fbdo.stringData() == "OPEN") {
      Serial.println("‚úÖ M·ªü c·ª≠a t·ª´ Firebase");
      setColor(0, 1, 0); // Xanh l√°
      openDoor();
      setColor(0, 0, 0); // T·∫Øt
    } else {
      Serial.println("üö´ Kh√¥ng m·ªü c·ª≠a t·ª´ Firebase");
    }
  } else {
    Serial.print("‚ùå L·ªói truy v·∫•n Firebase: ");
    Serial.println(fbdo.errorReason());
    return;
  }
  // Reset gi√° tr·ªã m·ªü c·ª≠a v·ªÅ false sau khi x·ª≠ l√Ω
  String Alert = "ALERT";
  if (Firebase.RTDB.setString(&fbdo, "/door_control/status", Alert)) {
    Serial.println("‚úÖ ƒê·∫∑t l·∫°i tr·∫°ng th√°i m·ªü c·ª≠a v·ªÅ false");
  } else {
    Serial.print("‚ùå L·ªói ƒë·∫∑t l·∫°i tr·∫°ng th√°i m·ªü c·ª≠a: ");
    Serial.println(fbdo.errorReason());
  }
}

// ==== Qu√©t RFID ====
void RC522() {
  if (!rfid.PICC_IsNewCardPresent() || !rfid.PICC_ReadCardSerial()) return;

  String uidString = "";
  for (byte i = 0; i < rfid.uid.size; i++) {
    uidString += String(rfid.uid.uidByte[i] < 0x10 ? "0" : "");
    uidString += String(rfid.uid.uidByte[i], HEX);
  }
  uidString.toUpperCase();
  Serial.print("üìõ UID: ");
  Serial.println(uidString);

  String path = String("/rfid/") + uidString + "/active";  // truy c·∫≠p ƒë·∫øn gi√° tr·ªã boolean

  if (Firebase.RTDB.getBool(&fbdo, path)) {
    if (fbdo.boolData()==true) {
      Serial.println("‚úÖ UID h·ª£p l·ªá - M·ªü c·ª≠a");
      setColor(0, 1, 0); // Xanh l√°
      openDoor();
      setColor(0, 0, 0); // T·∫Øt
    } else {
      Serial.println("üö´ UID kh√¥ng h·ª£p l·ªá!");
      setColor(1, 0, 0); // ƒê·ªè
      delay(2000); // ƒê·ª£i 2 gi√¢y tr∆∞·ªõc khi t·∫Øt ƒë√®n
      setColor(0, 0, 0); // T·∫Øt ƒë√®n
    }
  } else {
    Serial.print("‚ùå L·ªói truy v·∫•n UID: ");
    Serial.println(fbdo.errorReason());
    setColor(1, 0, 0); // ƒê·ªè
    delay(2000); // ƒê·ª£i 2 gi√¢y tr∆∞·ªõc khi t·∫Øt ƒë√®n
    setColor(0, 0, 0); // T·∫Øt ƒë√®n
  }

  rfid.PICC_HaltA();
  rfid.PCD_StopCrypto1();
}

// ==== ƒê·ªçc DHT11 ====
void DHT_11() {
  sensors_event_t event;

  dht.temperature().getEvent(&event);
  float temperature = event.temperature;

  dht.humidity().getEvent(&event);
  float humidity = event.relative_humidity;

  if (isnan(temperature) || isnan(humidity)) {
    Serial.println(F("‚ùå L·ªói ƒë·ªçc c·∫£m bi·∫øn!"));
  } else {
    Serial.print(F("üå°Ô∏è Nhi·ªát ƒë·ªô: "));
    Serial.print(temperature);
    Serial.println(F("¬∞C"));
    Serial.print(F("üíß ƒê·ªô ·∫©m: "));
    Serial.print(humidity);
    Serial.println(F("%"));

    if (Firebase.RTDB.setFloat(&fbdo, "/sensors/temperature", temperature) &&
        Firebase.RTDB.setFloat(&fbdo, "/sensors/humidity", humidity)) {
      Serial.println(F("‚úÖ G·ª≠i d·ªØ li·ªáu l√™n Firebase th√†nh c√¥ng"));
    } else {
      Serial.print(F("‚ùå L·ªói g·ª≠i d·ªØ li·ªáu DHT11: "));
      Serial.println(fbdo.errorReason());
    }
  }
}


void AddCard() {
  isBusy = true;
  previousMillisReadNewCard = millis(); // ‚úÖ FIX l·ªói th·ªùi gian

  String path_AddCard = "/new_card/";
  String path_CardList = "/rfid/";
  String name = "Th·∫ª m·ªõi";


  if (Firebase.RTDB.getBool(&fbdo, path_AddCard + "request")) {
    if (fbdo.boolData()) {
      Serial.println("üîÅ B·∫Øt ƒë·∫ßu qu√° tr√¨nh th√™m th·∫ª m·ªõi...");
      setColor(1, 1, 0); // V√†ng ƒë·ªÉ b√°o ƒëang ch·ªù
      while (millis() - previousMillisReadNewCard < intervalReadNewCard) {
        Serial.println("‚è≥ ƒêang ch·ªù th·∫ª...");
        if (!rfid.PICC_IsNewCardPresent()) {
          delay(300);
          continue;
        }
        if (!rfid.PICC_ReadCardSerial()) {
          delay(300);
          continue;
        }

        String newCardUID = "";
        for (byte i = 0; i < rfid.uid.size; i++) {
          newCardUID += String(rfid.uid.uidByte[i] < 0x10 ? "0" : "");
          newCardUID += String(rfid.uid.uidByte[i], HEX);
        }
        newCardUID.toUpperCase();

        String cardPath = path_CardList + newCardUID + "/active";
        if (Firebase.RTDB.getBool(&fbdo, cardPath) && fbdo.boolData()) {
          Serial.println("üö´ Th·∫ª ƒë√£ t·ªìn t·∫°i!");
          Firebase.RTDB.setBool(&fbdo, path_AddCard + "request", false);

          setColor(1, 0, 0); // ƒê·ªè
          delay(2000);
          break;
        }

        if (Firebase.RTDB.getString(&fbdo, path_AddCard + "name")) {
          name = fbdo.stringData();
        }

        bool added = Firebase.RTDB.setBool(&fbdo, cardPath, true) &&
                     Firebase.RTDB.setString(&fbdo, path_CardList + newCardUID + "/name", name);

        if (added) {
          Serial.println("‚úÖ Th√™m th·∫ª m·ªõi th√†nh c√¥ng");
          setColor(0, 1, 0); // Xanh l√°
          delay(2000);
          Firebase.RTDB.setBool(&fbdo, path_AddCard + "request", false);
        } else {
          Serial.print("‚ùå L·ªói th√™m th·∫ª: ");
          Serial.println(fbdo.errorReason());
          setColor(1, 0, 0);
          delay(2000);
        }

        break; // ‚úÖ D·ª´ng v√≤ng l·∫∑p sau khi x·ª≠ l√Ω
      }
      Firebase.RTDB.setBool(&fbdo, path_AddCard + "request", false);

       setColor(0, 0, 0); // T·∫Øt ƒë√®n sau khi ho√†n th√†nh 
      rfid.PICC_HaltA();
      rfid.PCD_StopCrypto1();
    }
  } else {
    Serial.print("‚ùå Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c y√™u c·∫ßu th√™m th·∫ª: ");
    Serial.println(fbdo.errorReason());
  }

  setColor(0, 0, 0); // T·∫Øt ƒë√®n
  isBusy = false;
}
